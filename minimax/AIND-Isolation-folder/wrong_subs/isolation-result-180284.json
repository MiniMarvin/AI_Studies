{
    "critiques": {
        "680": {
            "rubric_items": {
                "7303": {
                    "observation": "Not all of the tests passed.\n\n```\n************************************************************************\n                         Test Failure Feedback                          \n************************************************************************\n\nFailed Test: 14. Submission includes heuristic_analysis.pdf\n----------------------------------------------------------------------\nAssertionError: False is not true : You must submit a report named heuristic_analysis.pdf for review.\n\n\nFailed Test: 15. Submission includes research_review.pdf\n----------------------------------------------------------------------\nAssertionError: False is not true : You must submit a report named research_review.pdf for review.\n\n\n************************************************************************\n                          Test Result Summary                           \n************************************************************************\n\n14. Submission includes heuristic_analysis.pdf:                        F\n15. Submission includes research_review.pdf:                           F\n\n------------------------------------------------------------------------\n            . - Test Passed    F - Test Failed    E - Error             \n\n```",
                    "result": "failed"
                },
                "5510": {
                    "observation": "Not all of the tests passed.\n\n```\n************************************************************************\n                         Test Failure Feedback                          \n************************************************************************\n\nFailed Test: 2. Test functionality of MinimaxPlayer.minimax()\n----------------------------------------------------------------------\nAssertionError: False is not true : Your MinimaxAgent.minimax function did not visit every node in the game tree as player 1.  First check for off-by-one errors in your handling of the depth limiting. Then, especially if the number of nodes explored by your agent is too low, check everywhere you call to game.get_legal_moves() to make sure you are getting the legal moves for the appropriate player at each level of the game tree.  Finally, you may be using non-standard search optimizations that are not supported by the test cases.  The range of expansions accepted will vary slightly within the range indicated based on your termination condition.\n\nExpected number of visited nodes -- min: 3 max: 3\nNumber of nodes your agent explored: 12\n\nTest Case Details:\n------------------\nHeuristic: center_distance\nDepth limit: 1\nInitial Board State:\n     0   1   2   3   4   5   6   7   8\n0  |   |   |   |   |   |   | - |   |   | \n1  |   |   | - |   | 2 |   |   |   |   | \n2  |   |   |   | - | - | - |   |   |   | \n3  |   | - | - | - | - | - | - | - |   | \n4  |   |   | - | - | - | - | - | - |   | \n5  |   |   |   | 1 |   | - | - |   |   | \n6  |   |   | - | - | - | - | - |   |   | \n7  |   |   |   |   | - |   |   |   |   | \n8  |   |   |   |   |   |   |   |   |   | \n\ngame._board_state:\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 32]\n\n\n\nFailed Test: 7. Test functionality of AlphaBetaPlayer.alphabeta()\n----------------------------------------------------------------------\nAssertionError: False is not true : Your AlphaBetaAgent.alphabeta function did not call the heuristic evaluation function in all of the expected set of leaf nodes configurations in the game tree as player 1. Make sure that you are using the self.score() method to evaluate the board (not calling one of your heuristic functions directly) and verify your stopping conditions. Leaf nodes are shown as (player_1, player_2) location pairs. Optional nodes may or may not be visited depending on your termination test.\n\nExpected leaf nodes:\n{((1, 5), (2, 5)), ((1, 1), (2, 5)), ((2, 4), (2, 5))}\nOptional leaf nodes:\nset()\nLeaf nodes your agent evaluated:\n{((1, 1), (0, 6)), ((1, 5), (3, 3)), ((2, 4), (0, 6)), ((1, 5), (1, 7)), ((2, 4), (1, 3)), ((1, 5), (0, 4)), ((1, 5), (0, 6)), ((2, 4), (3, 3)), ((1, 1), (0, 4)), ((1, 1), (1, 7)), ((1, 5), (1, 3)), ((1, 5), (3, 7)), ((1, 1), (1, 3)), ((2, 4), (0, 4)), ((1, 1), (3, 7)), ((2, 4), (1, 7)), ((2, 4), (3, 7)), ((1, 1), (3, 3))}\nSkipped nodes:\n{((1, 5), (2, 5)), ((1, 1), (2, 5)), ((2, 4), (2, 5))}\nExtra nodes:\n{((1, 1), (0, 6)), ((1, 5), (3, 3)), ((2, 4), (0, 6)), ((1, 1), (3, 3)), ((1, 1), (0, 4)), ((1, 1), (1, 7)), ((2, 4), (0, 4)), ((2, 4), (1, 7)), ((2, 4), (1, 3)), ((1, 5), (0, 4)), ((1, 1), (1, 3)), ((2, 4), (3, 3)), ((1, 5), (1, 3)), ((1, 5), (3, 7)), ((1, 5), (1, 7)), ((1, 1), (3, 7)), ((2, 4), (3, 7)), ((1, 5), (0, 6))}\n\nTest Case Details:\n------------------\nHeuristic: center_distance\nDepth limit: 1\nInitial Board State:\n     0   1   2   3   4   5   6   7   8\n0  |   |   |   | 1 |   |   |   |   |   | \n1  |   |   |   |   | - |   |   |   |   | \n2  |   |   | - | - |   | 2 | - |   |   | \n3  |   |   |   |   | - |   |   |   |   | \n4  |   |   |   | - | - | - | - |   |   | \n5  |   |   |   | - | - | - | - |   |   | \n6  |   |   | - |   | - | - |   |   |   | \n7  |   |   |   |   |   |   |   |   |   | \n8  |   |   |   |   |   |   |   |   |   | \n\ngame._board_state:\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 27]\n\n\n\n************************************************************************\n                          Test Result Summary                           \n************************************************************************\n\n1. Test output interface of MinimaxPlayer.minimax():                   .\n2. Test functionality of MinimaxPlayer.minimax():                      F\n3. Test that minimax() raises SearchTimeout when the timer expires:    .\n4. Test that MinimaxPlayer successfully plays a full game:             .\n5. Test interface of AlphaBetaPlayer.alphabeta():                      .\n6. Test the interface of AlphaBetaPlayer.get_move():                   .\n7. Test functionality of AlphaBetaPlayer.alphabeta():                  F\n8. Test that alphabeta() raises SearchTimeout when the timer expires:  .\n9. Test iterative deepening in AlphaBetaPlayer.get_move():             .\n10. Test that AlphaBetaPlayer successfully plays a full game:          .\n11. Test output interface of custom_score():                           .\n12. Test output interface of custom_score_2():                         .\n13. Test output interface of custom_score_3():                         .\n\n------------------------------------------------------------------------\n            . - Test Passed    F - Test Failed    E - Error             \n\n```",
                    "result": "failed"
                }
            }
        }
    }
}